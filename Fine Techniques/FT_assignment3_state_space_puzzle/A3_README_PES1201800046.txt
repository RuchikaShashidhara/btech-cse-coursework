State space puzzle - PES1201800046

> Data structures used:

	1) Capacities of each jug - A, B, C and the implementation field of the next function index to be applied
		struct state
		{
			int A_; 	// number of litres in jug A
			int B_; 	// number of litres in jug B
			int C_; 	// number of litres in jug C
			int fn_index_;  // indicates next function to apply
		};
		typedef struct state state_t;

	2) Each state in the list of states for a particular soln
		struct node
		{
			state_t st_;        //information of the node - state
			struct node* prev;  //address pointing to the previous node
			struct node* next;  //address pointing to the next node
		};
		typedef struct node node_t;

	3) A double linked list of states for a particular soln
		struct list
		{
			node_t* head_;  //head node
			node_t* tail_;  //tail node
		};
		typedef struct list list_t;

	4) Global variables that contain the maximun capacities of the jug - A, B, C
		int maxA, maxB, maxC;

> Backtracking logic for each soln to be displayed:

	1) Start state is added to a soln list and setting soln=0, count=0
	2) Selecting the move function wrt fn_index of the last state to get a temp state
	3) If the temp state is not repeated in the soln list:
		  I) Adding the temp state to the soln list
		 II) Assigning the flag of soln, if the last state is goal state, soln=1, else soln=0	
		III) If soln = 1:
				 i) Displaying the states of soln list and incrementing count
				ii) Incrementing the fn_index of the last state and 
				    if all the states have been reached from that state,
				    removing the last state and assigning soln=0
		 IV) If soln = 0:
		 		i) Incrementing the fn_index of the last state and 
				   if all the states have been reached from that state,
				   removing the last state and assigning soln=0
			       ii) Repeating the above i) step until there are no states in the soln list
	4) Repeating the above steps 2 and 3 until there are no states in the soln list
	5) Displaying the total num of soln in count	

> Files used:
	A3_client_PES1201800046.c	//Client file
	A3_header_PES1201800046.c	//Header file
	A3_impl_PES1201800046.c		//Implentation file

> How to compile the code:
	gcc -Wall A3_client_PES1201800046.c A3_impl_PES1201800046.c

> Key takeaway from this assignment:
	1) Solved this puzzle by finding out each state of the jug and connecting them by checking 
	   if it valid or not
	2) Used a pointer to function, which simplified each calling multiple functions which performed 
	   similar opeartions multiple number of titmes
	3) Used an Iterative DFS backtracking kind of approach to find the next states(see backtracking logic) 

